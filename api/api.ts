/* tslint:disable */
/* eslint-disable */
/**
 * My API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AddStudentsRequest
 */
export interface AddStudentsRequest {
    /**
     * 
     * @type {number}
     * @memberof AddStudentsRequest
     */
    'classId'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof AddStudentsRequest
     */
    'studentIds'?: Array<string> | null;
}
/**
 * 
 * @export
 * @interface AppUser
 */
export interface AppUser {
    /**
     * 
     * @type {string}
     * @memberof AppUser
     */
    'id'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AppUser
     */
    'userName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AppUser
     */
    'normalizedUserName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AppUser
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AppUser
     */
    'normalizedEmail'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof AppUser
     */
    'emailConfirmed'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AppUser
     */
    'passwordHash'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AppUser
     */
    'securityStamp'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AppUser
     */
    'concurrencyStamp'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AppUser
     */
    'phoneNumber'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof AppUser
     */
    'phoneNumberConfirmed'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof AppUser
     */
    'twoFactorEnabled'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AppUser
     */
    'lockoutEnd'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof AppUser
     */
    'lockoutEnabled'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof AppUser
     */
    'accessFailedCount'?: number;
    /**
     * 
     * @type {string}
     * @memberof AppUser
     */
    'fullName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AppUser
     */
    'avatarUrl'?: string | null;
}
/**
 * 
 * @export
 * @interface Chapter
 */
export interface Chapter {
    /**
     * 
     * @type {number}
     * @memberof Chapter
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Chapter
     */
    'name': string;
    /**
     * 
     * @type {Array<Question>}
     * @memberof Chapter
     */
    'questions'?: Array<Question> | null;
}
/**
 * 
 * @export
 * @interface Class
 */
export interface Class {
    /**
     * 
     * @type {number}
     * @memberof Class
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Class
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Class
     */
    'teacherId'?: string | null;
    /**
     * 
     * @type {AppUser}
     * @memberof Class
     */
    'teacher'?: AppUser;
    /**
     * 
     * @type {Array<ClassStudent>}
     * @memberof Class
     */
    'classStudents'?: Array<ClassStudent> | null;
}
/**
 * 
 * @export
 * @interface ClassStudent
 */
export interface ClassStudent {
    /**
     * 
     * @type {number}
     * @memberof ClassStudent
     */
    'classId'?: number;
    /**
     * 
     * @type {Class}
     * @memberof ClassStudent
     */
    'class'?: Class;
    /**
     * 
     * @type {string}
     * @memberof ClassStudent
     */
    'studentId'?: string | null;
    /**
     * 
     * @type {AppUser}
     * @memberof ClassStudent
     */
    'student'?: AppUser;
}
/**
 * 
 * @export
 * @interface CreateChapterRequest
 */
export interface CreateChapterRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateChapterRequest
     */
    'name'?: string | null;
}
/**
 * 
 * @export
 * @interface CreateChapterResponse
 */
export interface CreateChapterResponse {
    /**
     * 
     * @type {string}
     * @memberof CreateChapterResponse
     */
    'message'?: string | null;
}
/**
 * 
 * @export
 * @interface CreateClassRequest
 */
export interface CreateClassRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateClassRequest
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateClassRequest
     */
    'teacherId'?: string | null;
}
/**
 * 
 * @export
 * @interface CreateClassResponse
 */
export interface CreateClassResponse {
    /**
     * 
     * @type {string}
     * @memberof CreateClassResponse
     */
    'message'?: string | null;
}
/**
 * 
 * @export
 * @interface CreateDifficultyRequest
 */
export interface CreateDifficultyRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateDifficultyRequest
     */
    'level'?: string | null;
}
/**
 * 
 * @export
 * @interface CreateDifficultyResponse
 */
export interface CreateDifficultyResponse {
    /**
     * 
     * @type {string}
     * @memberof CreateDifficultyResponse
     */
    'message'?: string | null;
}
/**
 * 
 * @export
 * @interface CreateExamRequest
 */
export interface CreateExamRequest {
    /**
     * 
     * @type {number}
     * @memberof CreateExamRequest
     */
    'subjectId': number;
    /**
     * 
     * @type {string}
     * @memberof CreateExamRequest
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CreateExamRequest
     */
    'date': string;
    /**
     * 
     * @type {Array<number>}
     * @memberof CreateExamRequest
     */
    'questionIds': Array<number>;
}
/**
 * 
 * @export
 * @interface CreateExamResponse
 */
export interface CreateExamResponse {
    /**
     * 
     * @type {string}
     * @memberof CreateExamResponse
     */
    'message'?: string | null;
}
/**
 * 
 * @export
 * @interface CreateQuestionRequest
 */
export interface CreateQuestionRequest {
    /**
     * 
     * @type {number}
     * @memberof CreateQuestionRequest
     */
    'subjectId': number;
    /**
     * 
     * @type {string}
     * @memberof CreateQuestionRequest
     */
    'content': string;
    /**
     * 
     * @type {number}
     * @memberof CreateQuestionRequest
     */
    'chapterId': number;
    /**
     * 
     * @type {number}
     * @memberof CreateQuestionRequest
     */
    'difficultyId': number;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateQuestionRequest
     */
    'answers': Array<string>;
    /**
     * 
     * @type {Array<number>}
     * @memberof CreateQuestionRequest
     */
    'correctAnswers': Array<number>;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateQuestionRequest
     */
    'blobUrls'?: Array<string> | null;
}
/**
 * 
 * @export
 * @interface CreateQuestionResponse
 */
export interface CreateQuestionResponse {
    /**
     * 
     * @type {string}
     * @memberof CreateQuestionResponse
     */
    'message'?: string | null;
}
/**
 * 
 * @export
 * @interface CreateSubjectRequest
 */
export interface CreateSubjectRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateSubjectRequest
     */
    'name'?: string | null;
}
/**
 * 
 * @export
 * @interface CreateSubjectResponse
 */
export interface CreateSubjectResponse {
    /**
     * 
     * @type {string}
     * @memberof CreateSubjectResponse
     */
    'message'?: string | null;
}
/**
 * 
 * @export
 * @interface Difficulty
 */
export interface Difficulty {
    /**
     * 
     * @type {number}
     * @memberof Difficulty
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Difficulty
     */
    'level': string;
    /**
     * 
     * @type {Array<Question>}
     * @memberof Difficulty
     */
    'questions'?: Array<Question> | null;
}
/**
 * 
 * @export
 * @interface DisableUserRequest
 */
export interface DisableUserRequest {
    /**
     * 
     * @type {string}
     * @memberof DisableUserRequest
     */
    'userId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DisableUserRequest
     */
    'username'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DisableUserRequest
     */
    'email'?: string | null;
}
/**
 * 
 * @export
 * @interface EnableUserRequest
 */
export interface EnableUserRequest {
    /**
     * 
     * @type {string}
     * @memberof EnableUserRequest
     */
    'userId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnableUserRequest
     */
    'username'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnableUserRequest
     */
    'email'?: string | null;
}
/**
 * 
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     * 
     * @type {Array<string>}
     * @memberof ErrorResponse
     */
    'errors'?: Array<string> | null;
}
/**
 * 
 * @export
 * @interface Exam
 */
export interface Exam {
    /**
     * 
     * @type {number}
     * @memberof Exam
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof Exam
     */
    'subjectId'?: number;
    /**
     * 
     * @type {Subject}
     * @memberof Exam
     */
    'subject'?: Subject;
    /**
     * 
     * @type {string}
     * @memberof Exam
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Exam
     */
    'date': string;
    /**
     * 
     * @type {string}
     * @memberof Exam
     */
    'teacherId'?: string | null;
    /**
     * 
     * @type {AppUser}
     * @memberof Exam
     */
    'teacher'?: AppUser;
    /**
     * 
     * @type {Array<ExamQuestion>}
     * @memberof Exam
     */
    'examQuestions'?: Array<ExamQuestion> | null;
}
/**
 * 
 * @export
 * @interface ExamQuestion
 */
export interface ExamQuestion {
    /**
     * 
     * @type {number}
     * @memberof ExamQuestion
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof ExamQuestion
     */
    'examId'?: number;
    /**
     * 
     * @type {Exam}
     * @memberof ExamQuestion
     */
    'exam'?: Exam;
    /**
     * 
     * @type {number}
     * @memberof ExamQuestion
     */
    'questionId'?: number;
    /**
     * 
     * @type {Question}
     * @memberof ExamQuestion
     */
    'question'?: Question;
}
/**
 * 
 * @export
 * @interface LoginRequest
 */
export interface LoginRequest {
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    'username'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    'password'?: string | null;
}
/**
 * 
 * @export
 * @interface LoginResponse
 */
export interface LoginResponse {
    /**
     * 
     * @type {string}
     * @memberof LoginResponse
     */
    'token'?: string | null;
}
/**
 * 
 * @export
 * @interface PagedQuestionResponse
 */
export interface PagedQuestionResponse {
    /**
     * 
     * @type {Array<QuestionResponse>}
     * @memberof PagedQuestionResponse
     */
    'questions'?: Array<QuestionResponse> | null;
    /**
     * 
     * @type {number}
     * @memberof PagedQuestionResponse
     */
    'totalItems'?: number;
    /**
     * 
     * @type {number}
     * @memberof PagedQuestionResponse
     */
    'currentPage'?: number;
    /**
     * 
     * @type {number}
     * @memberof PagedQuestionResponse
     */
    'pageSize'?: number;
}
/**
 * 
 * @export
 * @interface PagedUserResponse
 */
export interface PagedUserResponse {
    /**
     * 
     * @type {Array<UserInfoResponse>}
     * @memberof PagedUserResponse
     */
    'users'?: Array<UserInfoResponse> | null;
    /**
     * 
     * @type {number}
     * @memberof PagedUserResponse
     */
    'totalItems'?: number;
    /**
     * 
     * @type {number}
     * @memberof PagedUserResponse
     */
    'currentPage'?: number;
    /**
     * 
     * @type {number}
     * @memberof PagedUserResponse
     */
    'pageSize'?: number;
}
/**
 * 
 * @export
 * @interface ProblemDetails
 */
export interface ProblemDetails {
    [key: string]: any;

    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    'type'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    'title'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ProblemDetails
     */
    'status'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    'detail'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    'instance'?: string | null;
}
/**
 * 
 * @export
 * @interface Question
 */
export interface Question {
    /**
     * 
     * @type {number}
     * @memberof Question
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof Question
     */
    'subjectId'?: number;
    /**
     * 
     * @type {Subject}
     * @memberof Question
     */
    'subject'?: Subject;
    /**
     * 
     * @type {string}
     * @memberof Question
     */
    'content': string;
    /**
     * 
     * @type {number}
     * @memberof Question
     */
    'chapterId'?: number;
    /**
     * 
     * @type {Chapter}
     * @memberof Question
     */
    'chapter'?: Chapter;
    /**
     * 
     * @type {number}
     * @memberof Question
     */
    'difficultyId'?: number;
    /**
     * 
     * @type {Difficulty}
     * @memberof Question
     */
    'difficulty'?: Difficulty;
    /**
     * 
     * @type {string}
     * @memberof Question
     */
    'answersJson': string;
    /**
     * 
     * @type {Array<number>}
     * @memberof Question
     */
    'correctAnswer': Array<number>;
    /**
     * 
     * @type {Array<string>}
     * @memberof Question
     */
    'blobUrls'?: Array<string> | null;
    /**
     * 
     * @type {string}
     * @memberof Question
     */
    'teacherId'?: string | null;
    /**
     * 
     * @type {AppUser}
     * @memberof Question
     */
    'teacher'?: AppUser;
    /**
     * 
     * @type {Array<string>}
     * @memberof Question
     */
    'answers'?: Array<string> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof Question
     */
    'blobUrlList'?: Array<string> | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof Question
     */
    'correctAnswerList'?: Array<number> | null;
    /**
     * 
     * @type {Array<ExamQuestion>}
     * @memberof Question
     */
    'examQuestions'?: Array<ExamQuestion> | null;
}
/**
 * 
 * @export
 * @interface QuestionResponse
 */
export interface QuestionResponse {
    /**
     * 
     * @type {number}
     * @memberof QuestionResponse
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof QuestionResponse
     */
    'content'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof QuestionResponse
     */
    'subject'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof QuestionResponse
     */
    'chapterName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof QuestionResponse
     */
    'difficultyLevel'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof QuestionResponse
     */
    'teacherName'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof QuestionResponse
     */
    'answers'?: Array<string> | null;
    /**
     * 
     * @type {string}
     * @memberof QuestionResponse
     */
    'answersJson'?: string | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof QuestionResponse
     */
    'correctAnswer'?: Array<number> | null;
}
/**
 * 
 * @export
 * @interface RegisterAdminRequest
 */
export interface RegisterAdminRequest {
    /**
     * 
     * @type {string}
     * @memberof RegisterAdminRequest
     */
    'username'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RegisterAdminRequest
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RegisterAdminRequest
     */
    'password'?: string | null;
}
/**
 * 
 * @export
 * @interface RegisterMemberRequest
 */
export interface RegisterMemberRequest {
    /**
     * 
     * @type {string}
     * @memberof RegisterMemberRequest
     */
    'fullName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RegisterMemberRequest
     */
    'username'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RegisterMemberRequest
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RegisterMemberRequest
     */
    'password'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RegisterMemberRequest
     */
    'role'?: string | null;
}
/**
 * 
 * @export
 * @interface RegisterMemberResponse
 */
export interface RegisterMemberResponse {
    /**
     * 
     * @type {string}
     * @memberof RegisterMemberResponse
     */
    'message'?: string | null;
}
/**
 * 
 * @export
 * @interface RegisterResponse
 */
export interface RegisterResponse {
    /**
     * 
     * @type {string}
     * @memberof RegisterResponse
     */
    'message'?: string | null;
}
/**
 * 
 * @export
 * @interface Subject
 */
export interface Subject {
    /**
     * 
     * @type {number}
     * @memberof Subject
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Subject
     */
    'name': string;
    /**
     * 
     * @type {Array<Question>}
     * @memberof Subject
     */
    'questions'?: Array<Question> | null;
    /**
     * 
     * @type {Array<Exam>}
     * @memberof Subject
     */
    'exams'?: Array<Exam> | null;
}
/**
 * 
 * @export
 * @interface UpdateUserRequest
 */
export interface UpdateUserRequest {
    /**
     * 
     * @type {string}
     * @memberof UpdateUserRequest
     */
    'fullName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserRequest
     */
    'phoneNumber'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserRequest
     */
    'avatarUrl'?: string | null;
}
/**
 * 
 * @export
 * @interface UpdateUserResponse
 */
export interface UpdateUserResponse {
    /**
     * 
     * @type {string}
     * @memberof UpdateUserResponse
     */
    'message'?: string | null;
}
/**
 * 
 * @export
 * @interface UserInfoResponse
 */
export interface UserInfoResponse {
    /**
     * 
     * @type {string}
     * @memberof UserInfoResponse
     */
    'id'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserInfoResponse
     */
    'fullName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserInfoResponse
     */
    'phoneNumber'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserInfoResponse
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserInfoResponse
     */
    'avatarUrl'?: string | null;
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {LoginRequest} [loginRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLoginPost: async (loginRequest?: LoginRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RegisterMemberRequest} [registerMemberRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthRegisterMemberPost: async (registerMemberRequest?: RegisterMemberRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Auth/register-member`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerMemberRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RegisterAdminRequest} [registerAdminRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthRegisterPost: async (registerAdminRequest?: RegisterAdminRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Auth/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerAdminRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {LoginRequest} [loginRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthLoginPost(loginRequest?: LoginRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthLoginPost(loginRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.apiAuthLoginPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {RegisterMemberRequest} [registerMemberRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthRegisterMemberPost(registerMemberRequest?: RegisterMemberRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegisterMemberResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthRegisterMemberPost(registerMemberRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.apiAuthRegisterMemberPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {RegisterAdminRequest} [registerAdminRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthRegisterPost(registerAdminRequest?: RegisterAdminRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegisterResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthRegisterPost(registerAdminRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.apiAuthRegisterPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @param {LoginRequest} [loginRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLoginPost(loginRequest?: LoginRequest, options?: RawAxiosRequestConfig): AxiosPromise<LoginResponse> {
            return localVarFp.apiAuthLoginPost(loginRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RegisterMemberRequest} [registerMemberRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthRegisterMemberPost(registerMemberRequest?: RegisterMemberRequest, options?: RawAxiosRequestConfig): AxiosPromise<RegisterMemberResponse> {
            return localVarFp.apiAuthRegisterMemberPost(registerMemberRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RegisterAdminRequest} [registerAdminRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthRegisterPost(registerAdminRequest?: RegisterAdminRequest, options?: RawAxiosRequestConfig): AxiosPromise<RegisterResponse> {
            return localVarFp.apiAuthRegisterPost(registerAdminRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @param {LoginRequest} [loginRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public apiAuthLoginPost(loginRequest?: LoginRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).apiAuthLoginPost(loginRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RegisterMemberRequest} [registerMemberRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public apiAuthRegisterMemberPost(registerMemberRequest?: RegisterMemberRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).apiAuthRegisterMemberPost(registerMemberRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RegisterAdminRequest} [registerAdminRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public apiAuthRegisterPost(registerAdminRequest?: RegisterAdminRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).apiAuthRegisterPost(registerAdminRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ChapterApi - axios parameter creator
 * @export
 */
export const ChapterApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateChapterRequest} [createChapterRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiChapterCreatePost: async (createChapterRequest?: CreateChapterRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Chapter/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createChapterRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiChapterIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiChapterIdGet', 'id', id)
            const localVarPath = `/api/Chapter/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ChapterApi - functional programming interface
 * @export
 */
export const ChapterApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ChapterApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateChapterRequest} [createChapterRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiChapterCreatePost(createChapterRequest?: CreateChapterRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateChapterResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiChapterCreatePost(createChapterRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChapterApi.apiChapterCreatePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiChapterIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Chapter>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiChapterIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChapterApi.apiChapterIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ChapterApi - factory interface
 * @export
 */
export const ChapterApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ChapterApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateChapterRequest} [createChapterRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiChapterCreatePost(createChapterRequest?: CreateChapterRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreateChapterResponse> {
            return localVarFp.apiChapterCreatePost(createChapterRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiChapterIdGet(id: number, options?: RawAxiosRequestConfig): AxiosPromise<Chapter> {
            return localVarFp.apiChapterIdGet(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ChapterApi - object-oriented interface
 * @export
 * @class ChapterApi
 * @extends {BaseAPI}
 */
export class ChapterApi extends BaseAPI {
    /**
     * 
     * @param {CreateChapterRequest} [createChapterRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChapterApi
     */
    public apiChapterCreatePost(createChapterRequest?: CreateChapterRequest, options?: RawAxiosRequestConfig) {
        return ChapterApiFp(this.configuration).apiChapterCreatePost(createChapterRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChapterApi
     */
    public apiChapterIdGet(id: number, options?: RawAxiosRequestConfig) {
        return ChapterApiFp(this.configuration).apiChapterIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ClassApi - axios parameter creator
 * @export
 */
export const ClassApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateClassRequest} [createClassRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClassCreatePost: async (createClassRequest?: CreateClassRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Class/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createClassRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClassIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiClassIdGet', 'id', id)
            const localVarPath = `/api/Class/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AddStudentsRequest} [addStudentsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClassStudentsPost: async (addStudentsRequest?: AddStudentsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Class/students`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addStudentsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} teacherId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClassTeacherTeacherIdGet: async (teacherId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teacherId' is not null or undefined
            assertParamExists('apiClassTeacherTeacherIdGet', 'teacherId', teacherId)
            const localVarPath = `/api/Class/teacher/{teacherId}`
                .replace(`{${"teacherId"}}`, encodeURIComponent(String(teacherId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ClassApi - functional programming interface
 * @export
 */
export const ClassApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ClassApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateClassRequest} [createClassRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiClassCreatePost(createClassRequest?: CreateClassRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateClassResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiClassCreatePost(createClassRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ClassApi.apiClassCreatePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiClassIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Class>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiClassIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ClassApi.apiClassIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {AddStudentsRequest} [addStudentsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiClassStudentsPost(addStudentsRequest?: AddStudentsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiClassStudentsPost(addStudentsRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ClassApi.apiClassStudentsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} teacherId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiClassTeacherTeacherIdGet(teacherId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Class>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiClassTeacherTeacherIdGet(teacherId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ClassApi.apiClassTeacherTeacherIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ClassApi - factory interface
 * @export
 */
export const ClassApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ClassApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateClassRequest} [createClassRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClassCreatePost(createClassRequest?: CreateClassRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreateClassResponse> {
            return localVarFp.apiClassCreatePost(createClassRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClassIdGet(id: number, options?: RawAxiosRequestConfig): AxiosPromise<Class> {
            return localVarFp.apiClassIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AddStudentsRequest} [addStudentsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClassStudentsPost(addStudentsRequest?: AddStudentsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiClassStudentsPost(addStudentsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} teacherId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClassTeacherTeacherIdGet(teacherId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<Class>> {
            return localVarFp.apiClassTeacherTeacherIdGet(teacherId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ClassApi - object-oriented interface
 * @export
 * @class ClassApi
 * @extends {BaseAPI}
 */
export class ClassApi extends BaseAPI {
    /**
     * 
     * @param {CreateClassRequest} [createClassRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClassApi
     */
    public apiClassCreatePost(createClassRequest?: CreateClassRequest, options?: RawAxiosRequestConfig) {
        return ClassApiFp(this.configuration).apiClassCreatePost(createClassRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClassApi
     */
    public apiClassIdGet(id: number, options?: RawAxiosRequestConfig) {
        return ClassApiFp(this.configuration).apiClassIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AddStudentsRequest} [addStudentsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClassApi
     */
    public apiClassStudentsPost(addStudentsRequest?: AddStudentsRequest, options?: RawAxiosRequestConfig) {
        return ClassApiFp(this.configuration).apiClassStudentsPost(addStudentsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} teacherId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClassApi
     */
    public apiClassTeacherTeacherIdGet(teacherId: string, options?: RawAxiosRequestConfig) {
        return ClassApiFp(this.configuration).apiClassTeacherTeacherIdGet(teacherId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DifficultyApi - axios parameter creator
 * @export
 */
export const DifficultyApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateDifficultyRequest} [createDifficultyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDifficultyCreatePost: async (createDifficultyRequest?: CreateDifficultyRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Difficulty/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createDifficultyRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDifficultyIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiDifficultyIdGet', 'id', id)
            const localVarPath = `/api/Difficulty/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DifficultyApi - functional programming interface
 * @export
 */
export const DifficultyApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DifficultyApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateDifficultyRequest} [createDifficultyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDifficultyCreatePost(createDifficultyRequest?: CreateDifficultyRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateDifficultyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiDifficultyCreatePost(createDifficultyRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DifficultyApi.apiDifficultyCreatePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDifficultyIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Difficulty>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiDifficultyIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DifficultyApi.apiDifficultyIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DifficultyApi - factory interface
 * @export
 */
export const DifficultyApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DifficultyApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateDifficultyRequest} [createDifficultyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDifficultyCreatePost(createDifficultyRequest?: CreateDifficultyRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreateDifficultyResponse> {
            return localVarFp.apiDifficultyCreatePost(createDifficultyRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDifficultyIdGet(id: number, options?: RawAxiosRequestConfig): AxiosPromise<Difficulty> {
            return localVarFp.apiDifficultyIdGet(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DifficultyApi - object-oriented interface
 * @export
 * @class DifficultyApi
 * @extends {BaseAPI}
 */
export class DifficultyApi extends BaseAPI {
    /**
     * 
     * @param {CreateDifficultyRequest} [createDifficultyRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DifficultyApi
     */
    public apiDifficultyCreatePost(createDifficultyRequest?: CreateDifficultyRequest, options?: RawAxiosRequestConfig) {
        return DifficultyApiFp(this.configuration).apiDifficultyCreatePost(createDifficultyRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DifficultyApi
     */
    public apiDifficultyIdGet(id: number, options?: RawAxiosRequestConfig) {
        return DifficultyApiFp(this.configuration).apiDifficultyIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ExamApi - axios parameter creator
 * @export
 */
export const ExamApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateExamRequest} [createExamRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiExamCreatePost: async (createExamRequest?: CreateExamRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Exam/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createExamRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiExamIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiExamIdGet', 'id', id)
            const localVarPath = `/api/Exam/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExamApi - functional programming interface
 * @export
 */
export const ExamApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ExamApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateExamRequest} [createExamRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiExamCreatePost(createExamRequest?: CreateExamRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateExamResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiExamCreatePost(createExamRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExamApi.apiExamCreatePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiExamIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Exam>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiExamIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExamApi.apiExamIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ExamApi - factory interface
 * @export
 */
export const ExamApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ExamApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateExamRequest} [createExamRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiExamCreatePost(createExamRequest?: CreateExamRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreateExamResponse> {
            return localVarFp.apiExamCreatePost(createExamRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiExamIdGet(id: number, options?: RawAxiosRequestConfig): AxiosPromise<Exam> {
            return localVarFp.apiExamIdGet(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ExamApi - object-oriented interface
 * @export
 * @class ExamApi
 * @extends {BaseAPI}
 */
export class ExamApi extends BaseAPI {
    /**
     * 
     * @param {CreateExamRequest} [createExamRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExamApi
     */
    public apiExamCreatePost(createExamRequest?: CreateExamRequest, options?: RawAxiosRequestConfig) {
        return ExamApiFp(this.configuration).apiExamCreatePost(createExamRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExamApi
     */
    public apiExamIdGet(id: number, options?: RawAxiosRequestConfig) {
        return ExamApiFp(this.configuration).apiExamIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * QuestionApi - axios parameter creator
 * @export
 */
export const QuestionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateQuestionRequest} [createQuestionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiQuestionCreatePost: async (createQuestionRequest?: CreateQuestionRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Question/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createQuestionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiQuestionIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiQuestionIdGet', 'id', id)
            const localVarPath = `/api/Question/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [searchQuery] 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiQuestionSearchGet: async (searchQuery?: string, page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Question/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (searchQuery !== undefined) {
                localVarQueryParameter['searchQuery'] = searchQuery;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [searchQuery] 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiQuestionTeacherGet: async (searchQuery?: string, page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Question/teacher`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (searchQuery !== undefined) {
                localVarQueryParameter['searchQuery'] = searchQuery;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * QuestionApi - functional programming interface
 * @export
 */
export const QuestionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = QuestionApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateQuestionRequest} [createQuestionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiQuestionCreatePost(createQuestionRequest?: CreateQuestionRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateQuestionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiQuestionCreatePost(createQuestionRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QuestionApi.apiQuestionCreatePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiQuestionIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuestionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiQuestionIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QuestionApi.apiQuestionIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [searchQuery] 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiQuestionSearchGet(searchQuery?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedQuestionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiQuestionSearchGet(searchQuery, page, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QuestionApi.apiQuestionSearchGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [searchQuery] 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiQuestionTeacherGet(searchQuery?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedQuestionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiQuestionTeacherGet(searchQuery, page, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QuestionApi.apiQuestionTeacherGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * QuestionApi - factory interface
 * @export
 */
export const QuestionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = QuestionApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateQuestionRequest} [createQuestionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiQuestionCreatePost(createQuestionRequest?: CreateQuestionRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreateQuestionResponse> {
            return localVarFp.apiQuestionCreatePost(createQuestionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiQuestionIdGet(id: number, options?: RawAxiosRequestConfig): AxiosPromise<QuestionResponse> {
            return localVarFp.apiQuestionIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [searchQuery] 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiQuestionSearchGet(searchQuery?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<PagedQuestionResponse> {
            return localVarFp.apiQuestionSearchGet(searchQuery, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [searchQuery] 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiQuestionTeacherGet(searchQuery?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<PagedQuestionResponse> {
            return localVarFp.apiQuestionTeacherGet(searchQuery, page, pageSize, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * QuestionApi - object-oriented interface
 * @export
 * @class QuestionApi
 * @extends {BaseAPI}
 */
export class QuestionApi extends BaseAPI {
    /**
     * 
     * @param {CreateQuestionRequest} [createQuestionRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionApi
     */
    public apiQuestionCreatePost(createQuestionRequest?: CreateQuestionRequest, options?: RawAxiosRequestConfig) {
        return QuestionApiFp(this.configuration).apiQuestionCreatePost(createQuestionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionApi
     */
    public apiQuestionIdGet(id: number, options?: RawAxiosRequestConfig) {
        return QuestionApiFp(this.configuration).apiQuestionIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [searchQuery] 
     * @param {number} [page] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionApi
     */
    public apiQuestionSearchGet(searchQuery?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return QuestionApiFp(this.configuration).apiQuestionSearchGet(searchQuery, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [searchQuery] 
     * @param {number} [page] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionApi
     */
    public apiQuestionTeacherGet(searchQuery?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return QuestionApiFp(this.configuration).apiQuestionTeacherGet(searchQuery, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SubjectApi - axios parameter creator
 * @export
 */
export const SubjectApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateSubjectRequest} [createSubjectRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSubjectCreatePost: async (createSubjectRequest?: CreateSubjectRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Subject/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createSubjectRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSubjectIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiSubjectIdGet', 'id', id)
            const localVarPath = `/api/Subject/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SubjectApi - functional programming interface
 * @export
 */
export const SubjectApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SubjectApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateSubjectRequest} [createSubjectRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSubjectCreatePost(createSubjectRequest?: CreateSubjectRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateSubjectResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSubjectCreatePost(createSubjectRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubjectApi.apiSubjectCreatePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSubjectIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Subject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSubjectIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubjectApi.apiSubjectIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SubjectApi - factory interface
 * @export
 */
export const SubjectApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SubjectApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateSubjectRequest} [createSubjectRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSubjectCreatePost(createSubjectRequest?: CreateSubjectRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreateSubjectResponse> {
            return localVarFp.apiSubjectCreatePost(createSubjectRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSubjectIdGet(id: number, options?: RawAxiosRequestConfig): AxiosPromise<Subject> {
            return localVarFp.apiSubjectIdGet(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SubjectApi - object-oriented interface
 * @export
 * @class SubjectApi
 * @extends {BaseAPI}
 */
export class SubjectApi extends BaseAPI {
    /**
     * 
     * @param {CreateSubjectRequest} [createSubjectRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubjectApi
     */
    public apiSubjectCreatePost(createSubjectRequest?: CreateSubjectRequest, options?: RawAxiosRequestConfig) {
        return SubjectApiFp(this.configuration).apiSubjectCreatePost(createSubjectRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubjectApi
     */
    public apiSubjectIdGet(id: number, options?: RawAxiosRequestConfig) {
        return SubjectApiFp(this.configuration).apiSubjectIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {DisableUserRequest} [disableUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserDisablePut: async (disableUserRequest?: DisableUserRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/User/disable`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(disableUserRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {EnableUserRequest} [enableUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserEnablePut: async (enableUserRequest?: EnableUserRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/User/enable`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(enableUserRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserInfoGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/User/info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [query] 
         * @param {string} [role] 
         * @param {string} [username] 
         * @param {string} [email] 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserSearchGet: async (query?: string, role?: string, username?: string, email?: string, page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/User/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (role !== undefined) {
                localVarQueryParameter['role'] = role;
            }

            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateUserRequest} [updateUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserUpdatePut: async (updateUserRequest?: UpdateUserRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/User/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateUserRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {DisableUserRequest} [disableUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserDisablePut(disableUserRequest?: DisableUserRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserDisablePut(disableUserRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.apiUserDisablePut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {EnableUserRequest} [enableUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserEnablePut(enableUserRequest?: EnableUserRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserEnablePut(enableUserRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.apiUserEnablePut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserInfoGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserInfoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserInfoGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.apiUserInfoGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [query] 
         * @param {string} [role] 
         * @param {string} [username] 
         * @param {string} [email] 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserSearchGet(query?: string, role?: string, username?: string, email?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserSearchGet(query, role, username, email, page, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.apiUserSearchGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UpdateUserRequest} [updateUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserUpdatePut(updateUserRequest?: UpdateUserRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserUpdatePut(updateUserRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.apiUserUpdatePut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * 
         * @param {DisableUserRequest} [disableUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserDisablePut(disableUserRequest?: DisableUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<UpdateUserResponse> {
            return localVarFp.apiUserDisablePut(disableUserRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {EnableUserRequest} [enableUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserEnablePut(enableUserRequest?: EnableUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<UpdateUserResponse> {
            return localVarFp.apiUserEnablePut(enableUserRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserInfoGet(options?: RawAxiosRequestConfig): AxiosPromise<UserInfoResponse> {
            return localVarFp.apiUserInfoGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [query] 
         * @param {string} [role] 
         * @param {string} [username] 
         * @param {string} [email] 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserSearchGet(query?: string, role?: string, username?: string, email?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<PagedUserResponse> {
            return localVarFp.apiUserSearchGet(query, role, username, email, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateUserRequest} [updateUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserUpdatePut(updateUserRequest?: UpdateUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<UpdateUserResponse> {
            return localVarFp.apiUserUpdatePut(updateUserRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @param {DisableUserRequest} [disableUserRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiUserDisablePut(disableUserRequest?: DisableUserRequest, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).apiUserDisablePut(disableUserRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {EnableUserRequest} [enableUserRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiUserEnablePut(enableUserRequest?: EnableUserRequest, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).apiUserEnablePut(enableUserRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiUserInfoGet(options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).apiUserInfoGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [query] 
     * @param {string} [role] 
     * @param {string} [username] 
     * @param {string} [email] 
     * @param {number} [page] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiUserSearchGet(query?: string, role?: string, username?: string, email?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).apiUserSearchGet(query, role, username, email, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpdateUserRequest} [updateUserRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiUserUpdatePut(updateUserRequest?: UpdateUserRequest, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).apiUserUpdatePut(updateUserRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



